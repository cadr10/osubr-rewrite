generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}



model Outsong {
  uuid     String   @id @default(auto()) @map("_id") @db.ObjectId
  id       Int      @unique
  genres   String[]
  status   String   @default("waiting")
  author   User?    @relation(fields: [authorId], references: [id])
  authorId String?  @db.ObjectId
  user_id  String
}

model Song {
  uuid         String   @id @default(auto()) @map("_id") @db.ObjectId
  id           Int      @unique
  title        String?
  artist       String?
  bpm          Float?
  status       String?
  user_id      Int?
  creator      String?
  username     String?
  diffs        Json?
  last_updated String?
  thumbnail    String?
  nsfw         Boolean?
  tags         String?
  genres       String[]
}

model DeletedSong {
  uuid         String   @id @default(auto()) @map("_id") @db.ObjectId
  id           Int      @unique
  title        String?
  artist       String?
  bpm          Float?
  status       String?
  user_id      Int?
  creator      String?
  username     String?
  diffs        Json?
  last_updated String?
  thumbnail    String?
  nsfw         Boolean?
  tags         String?
  genres       String[]
}


model User {
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  isAdmin       Boolean   @default(false)
  isBanned      Boolean   @default(false)
  osu_id        String?    
  Outsong       Outsong[]
}

model Account {
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
